{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1PZdK2FgPBdtnFwLFAsb0BR1YnAYeXc4o","authorship_tag":"ABX9TyO0M0EJb9sKvfLIB2/AHc/2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DWqiWrgXYr1h","executionInfo":{"status":"ok","timestamp":1703045123601,"user_tz":-420,"elapsed":5865,"user":{"displayName":"Thư Diệp Anh","userId":"18397154397506270286"}},"outputId":"8e28d197-0b7b-499f-aa1f-9c80e5189608"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tập tin DiemHCM_TH.csv đã được tạo thành công!\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-1-e5a577071ae0>:50: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n","  df.loc[(df.min(axis=1) <= 1) | (df[\"DiemXepLoai\"] < 5), \"XepLoaiTN\"] = \"Rot\"\n","<ipython-input-1-e5a577071ae0>:51: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n","  df.loc[(df[\"DiemXepLoai\"] >= 8) & (df.min(axis=1) >= 7), \"XepLoaiTN\"] = \"Gioi\"\n","<ipython-input-1-e5a577071ae0>:52: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n","  df.loc[(df[\"DiemXepLoai\"] >= 6.5) & (df[\"DiemXepLoai\"] < 8) & (df.min(axis=1) >= 6), \"XepLoaiTN\"] = \"Kha\"\n"]},{"output_type":"stream","name":"stdout","text":["KNN Classification Report:\n","              precision    recall  f1-score   support\n","\n","        Gioi       0.84      0.90      0.87       310\n","         Kha       0.91      0.90      0.90      1784\n","         Rot       0.99      0.92      0.95       848\n","          TB       0.98      0.98      0.98     10493\n","\n","    accuracy                           0.97     13435\n","   macro avg       0.93      0.92      0.93     13435\n","weighted avg       0.97      0.97      0.97     13435\n","\n","Naive-Bayes Classification Report:\n"]}],"source":["\"\"\"## Câu 2:\n","-\tSử dụng lại tập tin kết quả thi THTHPT 2020 của TpHCM có kết quả xếp loại, nếu không có tập tin này thì thực hiện:\n"," Bổ sung 2 cột: Điểm xếp loại và  Xếp loại TN, sau đó tính tóan để điền thông tin cho 2 cột mới theo qui định dưới đây:\n","\n","- Điểm xếp loại  = Tổng số điểm các môn thi /Tổng số môn thi.\n","\n","-\tCách xếp loại tốt nghiệp THPT như sau:\n","Tất cả bài thi và các môn thi thành phần của bài thi tổ hợp đăng ký dự thi để xét công nhận tốt nghiệp đều đạt trên 1 điểm, và có điểm xếp loại từ 5 điểm trở lên được công nhận tốt nghiệp THPT.\n","+ Loại giỏi: điểm xếp loại từ 8,0 điểm trở lên; không bài thi nào có điểm dưới 7,0.\n","+ Loại khá: điểm xếp loại từ 6,5 điểm trở lên; không bài thi nào bị điểm dưới 6,0.\n","+ Loại trung bình: các trường hợp còn lại.\n","Các trường hợp còn lại: Không tốt nghiệp!!\n","-\tXóa các thông tin cá nhân để bảo mật và tôn trọng quyền riêng tư. Chỉ giữ lại các vùng điểm Toán-Văn-Ngoại Ngữ, 3 môn thành phần trong khối thi, điểm xếp loại và Xếp loại TN.\n","-\tTách thành 2 tập tin KetQuaTNTHPT-Train và KetQuaTNTHPT-Test với số lượng thí sinh trong 2 tập tin theo tỷ lệ 80(Train)/20(Test) .\n","-\tSử dụng thuật toán KNN để xem kết quả xếp loại trong tập tin Test có đúng/tốt hay không?\n","-\tSử dụng thuật toán Naive-Bayes để xem kết quả xếp loại trong tập tin Test có đúng/tốt hay không?\n","\n","\"\"\"\n","\n","import pandas as pd\n","\n","# Đọc dữ liệu từ hai tập tin khtn.csv và khxh.csv\n","df_khtn = pd.read_csv(\"/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 5/df_khtn_hcm.csv\")\n","# Chọn các cột cần gộp thành tập tin mới tonghop.csv\n","columns = [\"Toan\", \"Nguvan\", \"Ngoaingu\", \"Vatli\", \"Hoahoc\", \"Sinhhoc\"]\n","df_khtn = df_khtn[columns]\n","df_khtn.columns = [\"Toan\", \"Nguvan\", \"Ngoaingu\", \"Mon1\", \"Mon2\", \"Mon3\"]\n","df_khtn\n","\n","# Đọc dữ liệu từ hai tập tin khtn.csv và khxh.csv\n","df_khxh = pd.read_csv(\"/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 5/df_khxh_hcm.csv\")\n","# Chọn các cột cần gộp thành tập tin mới tonghop.csv\n","columns_khxh = [\"Toan\", \"Nguvan\", \"Ngoaingu\", \"LichSu\", \"Diali\", \"GDCD\"]\n","df_khxh = df_khxh[columns_khxh]\n","df_khxh.columns = [\"Toan\", \"Nguvan\", \"Ngoaingu\", \"Mon1\", \"Mon2\", \"Mon3\"]\n","df_khxh\n","\n","df_tonghop = pd.concat([df_khtn, df_khxh])\n","# Lưu DataFrame vào tập tin tonghop.csv\n","df_tonghop.to_csv(\"/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 5/DiemHCM_TH.csv\", index=False)\n","print(\"Tập tin DiemHCM_TH.csv đã được tạo thành công!\")\n","\n","df = pd.read_csv(\"/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 5/DiemHCM_TH.csv\")\n","df = df.fillna(0)\n","# Tính toán và thêm cột \"Điểm xếp loại\"\n","df[\"DiemXepLoai\"] = (df.sum(axis=1) / 6).round(3)\n","\n","# Thêm cột \"Xếp loại TN\" dựa trên giá trị \"Điểm xếp loại\"\n","df[\"XepLoaiTN\"] = \"\"\n","df.loc[(df.min(axis=1) <= 1) | (df[\"DiemXepLoai\"] < 5), \"XepLoaiTN\"] = \"Rot\"\n","df.loc[(df[\"DiemXepLoai\"] >= 8) & (df.min(axis=1) >= 7), \"XepLoaiTN\"] = \"Gioi\"\n","df.loc[(df[\"DiemXepLoai\"] >= 6.5) & (df[\"DiemXepLoai\"] < 8) & (df.min(axis=1) >= 6), \"XepLoaiTN\"] = \"Kha\"\n","df.loc[df[\"XepLoaiTN\"] == \"\", \"XepLoaiTN\"] = \"TB\"\n","\n","# In kết quả\n","df\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.metrics import classification_report\n","\n","# Đọc dữ liệu từ tập tin ban đầu\n","#df = pd.read_csv(\"data.csv\")\n","\n","# Tạo tập tin train và test với tỷ lệ 80:20\n","train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)\n","\n","# Xây dựng mô hình KNN\n","knn_model = KNeighborsClassifier(n_neighbors=5)\n","knn_model.fit(train_df[[\"Toan\", \"Nguvan\", \"Ngoaingu\", \"Mon1\", \"Mon2\", \"Mon3\"]], train_df[\"XepLoaiTN\"])\n","\n","# Dự đoán xếp loại trong tập test sử dụng KNN\n","knn_predictions = knn_model.predict(test_df[[\"Toan\", \"Nguvan\", \"Ngoaingu\", \"Mon1\", \"Mon2\", \"Mon3\"]])\n","\n","# Đánh giá kết quả dự đoán sử dụng KNN\n","print(\"KNN Classification Report:\")\n","print(classification_report(test_df[\"XepLoaiTN\"], knn_predictions))\n","\n","# Xây dựng mô hình Naive-Bayes\n","nb_model = GaussianNB()\n","nb_model.fit(train_df[[\"Toan\", \"Nguvan\", \"Ngoaingu\", \"Mon1\", \"Mon2\", \"Mon3\"]], train_df[\"XepLoaiTN\"])\n","\n","# Dự đoán xếp loại trong tập test sử dụng Naive-Bayes\n","nb_predictions = nb_model.predict(test_df[[\"Toan\", \"Nguvan\", \"Ngoaingu\", \"Mon1\", \"Mon2\", \"Mon3\"]])\n","\n","# Đánh giá kết quả dự đoán sử dụng Naive-Bayes\n","print(\"Naive-Bayes Classification Report:\")\n"]}]}
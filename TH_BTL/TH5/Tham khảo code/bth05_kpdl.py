# -*- coding: utf-8 -*-
"""BTH05_KPDL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sQtOWwX8c8zSkjkTz5P7izvZk3s4vKdC
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Câu 1:
Tập tin bank-data.csv trong LMS/Bộ dữ liệu thực hành chứa thông tin về các cá nhân vay tiền ngân hàng. Thông tin bao gồm: mã định danh, tuổi, giới tính, khu vực sinh sống, thu nhập (USD) 1 năm, tình trạng hôn nhân, số con, có xe hơi?, có mở tài khoản tiết kiệm?, có mở tài khoản thanh toán? Có nợ tiền mua nhà?, quyết định cho vay (Yes/No).

Sử dụng dữ liệu trong tập tin này để thực hiện các yêu cầu sau:
Xóa vùng định danh và xem như tập tin này được phân thành 2 lớp (nhóm): cho vay tiền (YES) và không cho vay (NO).

a)	Sử dụng phần mềm/ứng dụng để khảo sát thuật toán phân lớp Knn. Khi trắc nghiệm mô hình (test), thử nhiều phương pháp khác nhau (test data=train data, % split, k-cross validation) và quan sát các kết quả (confusion matrix, TP rate/FP rate/accuracy/precision/..) . Cho biết mô hình mà anh chị xem là tốt nhất ứng với các tham số nào, các giá trị đánh giá,…

b)	Từ tập tin ban đầu: tách thành 2 tập tin. Tập tin 1: TrainData sẽ dùng để huấn luyện (chiếm 90% dữ liệu) và tập tin 2:TestData (chiếm 10%) dữ liệu dùng để kiểm tra. Lưu ý khi phân chia cũng phải bảo đảm tỷ lệ từng lớp/nhóm trong 2 tập tin (nghĩa là tập tin 1 phải chứa 90% dữ liệu loại YES, 90% dữ liệu loại NO). Thực hiện lại câu a để tìm ra mô hình tốt nhất trong lúc huấn luyện.

c)	Sau đó đưa tập tin 2:TestData vào để kiểm tra xem kết quá phân lớp có đúng hay không?
Trình bày và nhận xét.

d)	Thực hiện lại b và c với thuật toán Naive-Bayes.

"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, classification_report

# Đọc dữ liệu từ tập tin CSV
data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/KPDL/DATASETS/CAC BUOI THUC HANH/BTH05/bank-data.csv")

# Xóa cột "id" vì không cần thiết cho việc phân loại
data.drop("id", axis=1, inplace=True)

# Chia dữ liệu thành features (X) và nhãn (y)
X = data.drop("pep", axis=1)
y = data["pep"]

# Chuyển đổi các cột dữ liệu dạng văn bản sang dạng số hóa
X = pd.get_dummies(X)
X.to_csv("demo.csv")

# a) Sử dụng KNN để phân loại
# Chia dữ liệu thành tập huấn luyện và tập kiểm tra (test data=train data)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)

# Khởi tạo mô hình KNN với k=5
knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(X_train, y_train)

# Dự đoán nhãn cho tập kiểm tra
y_pred = knn_model.predict(X_test)

# Đánh giá mô hình KNN
print("KNN Model Evaluation:")
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

# b) Tách bộ dữ liệu thành 2 phần
import pandas as pd
from sklearn.model_selection import train_test_split

# Đọc dữ liệu từ tập tin CSV
data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/KPDL/DATASETS/CAC BUOI THUC HANH/BTH05/bank-data.csv")

# Chia dữ liệu thành features (X) và nhãn (y)
X = data.drop("pep", axis=1)
y = data["pep"]

# Chia dữ liệu thành tập huấn luyện và tập kiểm tra với tỷ lệ 90% - 10% và đảm bảo tỷ lệ nhãn YES và NO
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, stratify=y, random_state=42)

# Gộp features và nhãn lại thành một DataFrame cho mỗi tập tin
train_data = pd.concat([X_train, y_train], axis=1)
test_data = pd.concat([X_test, y_test], axis=1)

# Lưu tập tin TrainData.csv
train_data.to_csv("TrainData.csv", index=False)

# Lưu tập tin TestData.csv
test_data.to_csv("TestData.csv", index=False)

print("Đã tách tập tin thành công! TrainData.csv và TestData.csv đã được tạo.")

# Đọc dữ liệu từ tập tin TrainData.csv và TestData.csv
train_data = pd.read_csv("TrainData.csv")
test_data = pd.read_csv("TestData.csv")

train_data.drop("id", axis=1, inplace=True)
test_data.drop("id", axis=1, inplace=True)

# Chia dữ liệu huấn luyện và kiểm tra thành features (X) và nhãn (y)
X_train = train_data.drop("pep", axis=1)
y_train = train_data["pep"]
X_test = test_data.drop("pep", axis=1)
y_test = test_data["pep"]

# Chuyển đổi các cột dữ liệu dạng văn bản sang dạng số hóa
X_train = pd.get_dummies(X_train)
X_test = pd.get_dummies(X_test)

# Khởi tạo mô hình KNN với k=3
knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(X_train, y_train)

# Dự đoán nhãn cho tập kiểm tra
y_pred = knn_model.predict(X_test)

# Đánh giá mô hình KNN trên tập kiểm tra
print("KNN Model Evaluation on Test Data:")
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

# c) Kiểm tra mô hình KNN trên tập dữ liệu mới (TestData)
# Đọc dữ liệu từ tập tin TrainData.csv và TestData.csv
train_data = pd.read_csv("TrainData.csv")
test_data = pd.read_csv("TestData.csv")

train_data.drop("id", axis=1, inplace=True)
test_data.drop("id", axis=1, inplace=True)

# Chia dữ liệu huấn luyện và kiểm tra thành features (X) và nhãn (y)
X_train = train_data.drop("pep", axis=1)
y_train = train_data["pep"]
X_test = test_data.drop("pep", axis=1)

# Chuyển đổi các cột dữ liệu dạng văn bản sang dạng số hóa
X_train = pd.get_dummies(X_train)
X_test = pd.get_dummies(X_test)

# Khởi tạo mô hình KNN với k=5 và huấn luyện trên toàn bộ dữ liệu huấn luyện
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)
print(y_test)
# Dự đoán nhãn cho tập dữ liệu mới (TestData)
y_pred = knn_model.predict(X_test)

# In kết quả dự đoán
print("KNN Classification Results on New Data:")
print(y_pred)

# d) Sử dụng Naive-Bayes để phân loại
# Khởi tạo mô hình Naive-Bayes
nb_model = GaussianNB()
nb_model.fit(X_train, y_train)

# Dự đoán nhãn cho tập kiểm tra
y_pred_nb = nb_model.predict(X_test)

# Đánh giá mô hình Naive-Bayes trên tập kiểm tra
print("Naive-Bayes Model Evaluation on Test Data:")
print(confusion_matrix(y_test, y_pred_nb))
print(classification_report(y_test, y_pred_nb))

"""## Câu 2:
-	Sử dụng lại tập tin kết quả thi THTHPT 2020 của TpHCM có kết quả xếp loại, nếu không có tập tin này thì thực hiện:
 Bổ sung 2 cột: Điểm xếp loại và  Xếp loại TN, sau đó tính tóan để điền thông tin cho 2 cột mới theo qui định dưới đây:

- Điểm xếp loại  = Tổng số điểm các môn thi /Tổng số môn thi.

-	Cách xếp loại tốt nghiệp THPT như sau:
Tất cả bài thi và các môn thi thành phần của bài thi tổ hợp đăng ký dự thi để xét công nhận tốt nghiệp đều đạt trên 1 điểm, và có điểm xếp loại từ 5 điểm trở lên được công nhận tốt nghiệp THPT.
+ Loại giỏi: điểm xếp loại từ 8,0 điểm trở lên; không bài thi nào có điểm dưới 7,0.
+ Loại khá: điểm xếp loại từ 6,5 điểm trở lên; không bài thi nào bị điểm dưới 6,0.
+ Loại trung bình: các trường hợp còn lại.
Các trường hợp còn lại: Không tốt nghiệp!!
-	Xóa các thông tin cá nhân để bảo mật và tôn trọng quyền riêng tư. Chỉ giữ lại các vùng điểm Toán-Văn-Ngoại Ngữ, 3 môn thành phần trong khối thi, điểm xếp loại và Xếp loại TN.
-	Tách thành 2 tập tin KetQuaTNTHPT-Train và KetQuaTNTHPT-Test với số lượng thí sinh trong 2 tập tin theo tỷ lệ 80(Train)/20(Test) .
-	Sử dụng thuật toán KNN để xem kết quả xếp loại trong tập tin Test có đúng/tốt hay không?
-	Sử dụng thuật toán Naive-Bayes để xem kết quả xếp loại trong tập tin Test có đúng/tốt hay không?

"""

import pandas as pd

# Đọc dữ liệu từ hai tập tin khtn.csv và khxh.csv
df_khtn = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/KPDL/CAC BUOI THUC HANH/BTH04/df_khtn_hcm.csv")
# Chọn các cột cần gộp thành tập tin mới tonghop.csv
columns = ["Toan", "Nguvan", "Ngoaingu", "Vatli", "Hoahoc", "Sinhhoc"]
df_khtn = df_khtn[columns]
df_khtn.columns = ["Toan", "Nguvan", "Ngoaingu", "Mon1", "Mon2", "Mon3"]
df_khtn

# Đọc dữ liệu từ hai tập tin khtn.csv và khxh.csv
df_khxh = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/KPDL/CAC BUOI THUC HANH/BTH04/df_khxh_hcm.csv")
# Chọn các cột cần gộp thành tập tin mới tonghop.csv
columns_khxh = ["Toan", "Nguvan", "Ngoaingu", "LichSu", "Diali", "GDCD"]
df_khxh = df_khxh[columns_khxh]
df_khxh.columns = ["Toan", "Nguvan", "Ngoaingu", "Mon1", "Mon2", "Mon3"]
df_khxh

df_tonghop = pd.concat([df_khtn, df_khxh])
# Lưu DataFrame vào tập tin tonghop.csv
df_tonghop.to_csv("/content/drive/MyDrive/Colab Notebooks/KPDL/CAC BUOI THUC HANH/BTH05/DiemHCM_TH.csv", index=False)
print("Tập tin DiemHCM_TH.csv đã được tạo thành công!")

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/KPDL/CAC BUOI THUC HANH/BTH05/DiemHCM_TH.csv")
df = df.fillna(0)
# Tính toán và thêm cột "Điểm xếp loại"
df["DiemXepLoai"] = (df.sum(axis=1) / 6).round(3)

# Thêm cột "Xếp loại TN" dựa trên giá trị "Điểm xếp loại"
df["XepLoaiTN"] = ""
df.loc[(df.min(axis=1) <= 1) | (df["DiemXepLoai"] < 5), "XepLoaiTN"] = "Rot"
df.loc[(df["DiemXepLoai"] >= 8) & (df.min(axis=1) >= 7), "XepLoaiTN"] = "Gioi"
df.loc[(df["DiemXepLoai"] >= 6.5) & (df["DiemXepLoai"] < 8) & (df.min(axis=1) >= 6), "XepLoaiTN"] = "Kha"
df.loc[df["XepLoaiTN"] == "", "XepLoaiTN"] = "TB"

# In kết quả
df

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report

# Đọc dữ liệu từ tập tin ban đầu
#df = pd.read_csv("data.csv")

# Tạo tập tin train và test với tỷ lệ 80:20
train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)

# Xây dựng mô hình KNN
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(train_df[["Toan", "Nguvan", "Ngoaingu", "Mon1", "Mon2", "Mon3"]], train_df["XepLoaiTN"])

# Dự đoán xếp loại trong tập test sử dụng KNN
knn_predictions = knn_model.predict(test_df[["Toan", "Nguvan", "Ngoaingu", "Mon1", "Mon2", "Mon3"]])

# Đánh giá kết quả dự đoán sử dụng KNN
print("KNN Classification Report:")
print(classification_report(test_df["XepLoaiTN"], knn_predictions))

# Xây dựng mô hình Naive-Bayes
nb_model = GaussianNB()
nb_model.fit(train_df[["Toan", "Nguvan", "Ngoaingu", "Mon1", "Mon2", "Mon3"]], train_df["XepLoaiTN"])

# Dự đoán xếp loại trong tập test sử dụng Naive-Bayes
nb_predictions = nb_model.predict(test_df[["Toan", "Nguvan", "Ngoaingu", "Mon1", "Mon2", "Mon3"]])

# Đánh giá kết quả dự đoán sử dụng Naive-Bayes
print("Naive-Bayes Classification Report:")
print(classification_report(test_df["XepLoaiTN"], nb_predictions))
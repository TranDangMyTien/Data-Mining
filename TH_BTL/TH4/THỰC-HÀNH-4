{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMNwjjvUHQLTNytRl5ev24d"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qFRLeHAvAyPT","executionInfo":{"status":"ok","timestamp":1700623052397,"user_tz":-420,"elapsed":24026,"user":{"displayName":"Thư Diệp Anh","userId":"18397154397506270286"}},"outputId":"96569ec2-aeb0-4907-c268-35a8b5896175"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XiofWfoi_Htf","executionInfo":{"status":"ok","timestamp":1700623265486,"user_tz":-420,"elapsed":443,"user":{"displayName":"Thư Diệp Anh","userId":"18397154397506270286"}},"outputId":"9e83937b-e4ce-4c87-dc42-b127f246a843"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n","<ipython-input-3-e24397b65090>:10: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n","  data_encoded = data.drop('NUM', 1).applymap(lambda x: True if x == 1 else False)\n"]},{"output_type":"stream","name":"stdout","text":["                              antecedents                consequents  \\\n","0                                   (JAM)                    (BREAD)   \n","1                                  (MILK)                    (BREAD)   \n","2                                  (COCK)                   (COFFEE)   \n","3                                   (JAM)                    (MAGGI)   \n","4                                 (MAGGI)                      (TEA)   \n","5                 (MILK,         BISCUIT)                    (BREAD)   \n","6               (        BISCUIT, COFFEE)                     (COCK)   \n","7                 (        BISCUIT, COCK)                   (COFFEE)   \n","8                 (        BISCUIT, COCK)               (CORNFLAKES)   \n","9                      (CORNFLAKES, COCK)          (        BISCUIT)   \n","10              (        BISCUIT, COFFEE)               (CORNFLAKES)   \n","11               (        BISCUIT, MAGGI)                      (TEA)   \n","12                 (        BISCUIT, TEA)                    (MAGGI)   \n","13                       (BOURNVITA, TEA)                    (BREAD)   \n","14                           (BREAD, JAM)                    (MAGGI)   \n","15                           (JAM, MAGGI)                    (BREAD)   \n","16                                  (JAM)             (BREAD, MAGGI)   \n","17                     (CORNFLAKES, COCK)                   (COFFEE)   \n","18  (        BISCUIT, COFFEE, CORNFLAKES)                     (COCK)   \n","19        (        BISCUIT, COFFEE, COCK)               (CORNFLAKES)   \n","20    (        BISCUIT, CORNFLAKES, COCK)                   (COFFEE)   \n","21             (COFFEE, CORNFLAKES, COCK)          (        BISCUIT)   \n","22              (        BISCUIT, COFFEE)         (CORNFLAKES, COCK)   \n","23                (        BISCUIT, COCK)       (COFFEE, CORNFLAKES)   \n","24                     (CORNFLAKES, COCK)  (        BISCUIT, COFFEE)   \n","\n","    antecedent support  consequent support  support  confidence       lift  \\\n","0                 0.10                0.65     0.10         1.0   1.538462   \n","1                 0.25                0.65     0.20         0.8   1.230769   \n","2                 0.15                0.40     0.15         1.0   2.500000   \n","3                 0.10                0.25     0.10         1.0   4.000000   \n","4                 0.25                0.35     0.20         0.8   2.285714   \n","5                 0.10                0.65     0.10         1.0   1.538462   \n","6                 0.10                0.15     0.10         1.0   6.666667   \n","7                 0.10                0.40     0.10         1.0   2.500000   \n","8                 0.10                0.30     0.10         1.0   3.333333   \n","9                 0.10                0.35     0.10         1.0   2.857143   \n","10                0.10                0.30     0.10         1.0   3.333333   \n","11                0.10                0.35     0.10         1.0   2.857143   \n","12                0.10                0.25     0.10         1.0   4.000000   \n","13                0.10                0.65     0.10         1.0   1.538462   \n","14                0.10                0.25     0.10         1.0   4.000000   \n","15                0.10                0.65     0.10         1.0   1.538462   \n","16                0.10                0.15     0.10         1.0   6.666667   \n","17                0.10                0.40     0.10         1.0   2.500000   \n","18                0.10                0.15     0.10         1.0   6.666667   \n","19                0.10                0.30     0.10         1.0   3.333333   \n","20                0.10                0.40     0.10         1.0   2.500000   \n","21                0.10                0.35     0.10         1.0   2.857143   \n","22                0.10                0.10     0.10         1.0  10.000000   \n","23                0.10                0.20     0.10         1.0   5.000000   \n","24                0.10                0.10     0.10         1.0  10.000000   \n","\n","    leverage  conviction  zhangs_metric  \n","0     0.0350         inf       0.388889  \n","1     0.0375        1.75       0.250000  \n","2     0.0900         inf       0.705882  \n","3     0.0750         inf       0.833333  \n","4     0.1125        3.25       0.750000  \n","5     0.0350         inf       0.388889  \n","6     0.0850         inf       0.944444  \n","7     0.0600         inf       0.666667  \n","8     0.0700         inf       0.777778  \n","9     0.0650         inf       0.722222  \n","10    0.0700         inf       0.777778  \n","11    0.0650         inf       0.722222  \n","12    0.0750         inf       0.833333  \n","13    0.0350         inf       0.388889  \n","14    0.0750         inf       0.833333  \n","15    0.0350         inf       0.388889  \n","16    0.0850         inf       0.944444  \n","17    0.0600         inf       0.666667  \n","18    0.0850         inf       0.944444  \n","19    0.0700         inf       0.777778  \n","20    0.0600         inf       0.666667  \n","21    0.0650         inf       0.722222  \n","22    0.0900         inf       1.000000  \n","23    0.0800         inf       0.888889  \n","24    0.0900         inf       1.000000  \n"]}],"source":["from numpy.lib.shape_base import column_stack\n","from mlxtend.frequent_patterns import apriori\n","from mlxtend.frequent_patterns import association_rules\n","import pandas as pd\n","\n","# Đọc dữ liệu từ tập tin\n","data = pd.read_csv('/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 4/GroceryStore-AssociateRules.csv', sep=',')\n","\n","# Chuyển đổi dữ liệu thành dạng One-Hot Encoding\n","data_encoded = data.drop('NUM', 1).applymap(lambda x: True if x == 1 else False)\n","\n","# Áp dụng thuật toán Apriori để tìm các luật kết hợp\n","frequent_itemsets = apriori(data_encoded, min_support=0.1, use_colnames=True)\n","\n","# Tìm các luật kết hợp dựa trên frequent itemsets và độ tin cậy\n","rules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.8)\n","## Có thể điều chỉnh `min_threshold` tùy vào nhu cầu! Trong khoảng 0 -> 1 tương ứng với độ tin cậy của kết quả đầu ra\n","## Một giá trị ngưỡng cao sẽ tạo ra ít luật hơn nhưng có độ tin cậy cao, trong khi một giá trị ngưỡng thấp sẽ tạo ra nhiều luật hơn nhưng có độ tin cậy thấp.\n","\n","# Lưu ra file csv\n","rules.to_excel(\"/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 4/test_res0.8.xlsx\")\n","# In kết quả\n","print(rules)"]},{"cell_type":"code","source":["## Dùng Luật kết hợp với Apriori\n","import pandas as pd\n","from mlxtend.preprocessing import TransactionEncoder\n","from mlxtend.frequent_patterns import apriori, association_rules\n","\n","df = pd.read_csv(\"/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 4/diemthi_hcm.csv\")\n","\n","# Lọc ra các cột cần tính toán\n","df_khtn = df[[\"Toan\", \"Nguvan\", \"Ngoaingu\", \"Vatli\", \"Hoahoc\", \"Sinhhoc\"]]\n","\n","df_khtn\n","\n","# Thay đổi điểm thi theo điều kiện\n","df_khtn = df_khtn.applymap(lambda x: 1 if x > 8.0 else 0)\n","\n","print(df_khtn)\n","\n","# Chuyển đổi dữ liệu thành dạng One-Hot Encoding\n","data_encoded = df_khtn.applymap(lambda x: True if x == 1 else False)\n","\n","# Áp dụng thuật toán Apriori để tìm các luật kết hợp\n","frequent_itemsets = apriori(data_encoded, min_support=0.1, use_colnames=True)\n","\n","# Tìm các luật kết hợp dựa trên frequent itemsets và độ tin cậy\n","rules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.1)\n","\n","print(rules)\n","\n","rules.to_excel(\"/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 4/demo.xlsx\")\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rxvlasUaDPfl","executionInfo":{"status":"ok","timestamp":1700624410036,"user_tz":-420,"elapsed":798,"user":{"displayName":"Thư Diệp Anh","userId":"18397154397506270286"}},"outputId":"6d9b195b-7857-43c9-e413-ab15c932bef3"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["       Toan  Nguvan  Ngoaingu  Vatli  Hoahoc  Sinhhoc\n","0         0       0         0      0       0        0\n","1         0       0         1      0       0        0\n","2         1       1         0      0       0        0\n","3         0       0         0      0       0        0\n","4         1       0         0      0       0        0\n","...     ...     ...       ...    ...     ...      ...\n","41945     1       1         0      0       0        0\n","41946     0       0         0      0       0        0\n","41947     1       0         0      1       1        0\n","41948     1       0         0      1       1        1\n","41949     1       0         0      0       1        0\n","\n","[41950 rows x 6 columns]\n","  antecedents consequents  antecedent support  consequent support   support  \\\n","0  (Ngoaingu)      (Toan)            0.142050            0.449106  0.109058   \n","1      (Toan)  (Ngoaingu)            0.449106            0.142050  0.109058   \n","2    (Hoahoc)      (Toan)            0.140906            0.449106  0.118832   \n","3      (Toan)    (Hoahoc)            0.449106            0.140906  0.118832   \n","\n","   confidence      lift  leverage  conviction  zhangs_metric  \n","0    0.767746  1.709499  0.045263    2.371949       0.483750  \n","1    0.242834  1.709499  0.045263    1.133107       0.753381  \n","2    0.843343  1.877826  0.055550    3.516559       0.544142  \n","3    0.264597  1.877826  0.055550    1.168194       0.848565  \n"]}]},{"cell_type":"code","source":["\n","## Dùng luật kết hợp với FP Growth\n","\n","import pandas as pd\n","from mlxtend.preprocessing import TransactionEncoder\n","import pyfpgrowth\n","\n","df = pd.read_csv(\"/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 4/diemthi_hcm.csv\")\n","# Lọc ra các cột cần tính toán\n","df_khtn = df[[\"Toan\", \"Nguvan\", \"Ngoaingu\", \"Vatli\", \"Hoahoc\", \"Sinhhoc\"]]\n","\n","df_khtn\n","\n","# Convert DataFrame to transactional format\n","transactions = df_khtn.apply(lambda row: [col for col, val in row.items() if val > 8], axis=1).tolist()\n","\n","# Apply FP-Growth algorithm to find frequent itemsets\n","patterns = pyfpgrowth.find_frequent_patterns(transactions, 0.1)\n","\n","# Generate association rules from frequent itemsets\n","rules = pyfpgrowth.generate_association_rules(patterns, 0.5)\n","\n","# Print the discovered rules\n","for rule, support in rules.items():\n","    antecedent = ', '.join(rule)\n","    consequent = ', '.join(rules[rule][0])\n","    confidence = rules[rule][1]\n","    print(f\"Rule: {antecedent} -> {consequent}\")\n","    print(f\"Support: {support}\")\n","    print(f\"Confidence: {confidence}\")\n","    print()\n","\n","# Nếu một sinh viên đạt điểm cao trong các môn <antecedance>, thì có khả năng cao sinh viên đó cũng đạt điểm cao trong môn <consequence>."],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":438},"id":"pB7DNGQeG0Tq","executionInfo":{"status":"error","timestamp":1700624745514,"user_tz":-420,"elapsed":7,"user":{"displayName":"Thư Diệp Anh","userId":"18397154397506270286"}},"outputId":"20588791-55a5-464f-b4d5-91a0b3603899"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-568f1c5511b4>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mmlxtend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mTransactionEncoder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpyfpgrowth\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpyfpgrowth\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/drive/MyDrive/KHAI PHÁ DỮ LIỆU/THỰC HÀNH 4/diemthi_hcm.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pyfpgrowth'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]}]}